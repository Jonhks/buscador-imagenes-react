{"version":3,"sources":["components/Error.jsx","components/Formulario.jsx","components/Imagen.jsx","components/ListadoImagenes.jsx","App.js","reportWebVitals.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","setTimeout","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","id","App","busqueda","setImagenes","peticionVacia","setPeticionVacia","paginaActual","setPaginaActual","totalPaginas","setTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","total","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","nuevaPaginaSiguiente","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0812ccfb.chunk.js","sourcesContent":["import React from 'react'\nconst Error = ({mensaje}) =>  {\n  return (\n    <p className=\"my-3 p-4 text-center text-black alert alert-danger\">\n      {mensaje}\n    </p>\n  )\n}\n\nexport default Error;","import {useState} from 'react';\n\nimport Error from './Error';\n\nconst Formulario = ({setBusqueda}) => {\n\n  const [termino, setTermino] = useState('');\n  const [error, setError] = useState(false);\n\n  const buscarImagenes = e => {\n    // prevenir el refresh\n    e.preventDefault();\n    // validar el form\n    if(termino.trim() === ''){\n      setError(true);\n      setTimeout(() => {\n        setError(false);\n      }, 1500)\n      return;\n    }\n    // setError(false);\n    // enviar esta informacion al componente principal\n    setBusqueda(termino);\n\n    // limpiar el formulario\n    setTermino('');\n  }\n\n  return (\n    <form\n      onSubmit={buscarImagenes}\n    >\n      <div className=\"row\">\n        <div className=\"form-group col-md-8\">\n          <input \n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Busca una imagen por ejemplo: Café, Futbol, Sopa\"\n            onChange={e => setTermino(e.target.value)}\n            value={termino}\n          />\n        </div>\n        <div className=\"form-group col-md-4\">\n          <input \n            type=\"submit\"\n            className=\"btn btn-lg btn-danger btn-block\"\n            value=\"Buscar\"\n          />\n        </div>\n      </div>\n      {error && <Error mensaje=\"El campo el obligatorio\" />}\n    </form>\n  );\n};\n\nexport default Formulario;","const Imagen = ({imagen}) => {\n  const {largeImageURL, likes, previewURL, tags, views } = imagen;\n  return(\n    <div className=\"col-12 col-ms-6 col-md-4 col-lg-3\">\n      <div className=\"card mt-4\">\n      <img \n        src={previewURL} \n        alt={tags}\n        className=\"card-img-top imagen\" \n      />\n      <div className=\"card-body\">\n        <p className=\"card-text\">{likes}: Me gusta ❤️</p>\n        <p className=\"card-text\">{views}: Vistas</p>\n      </div>\n      <div className=\"card-footer\">\n      <a\n        href={largeImageURL}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"btn btn-primary btn-block\"\n      >Ver Imagen</a>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Imagen;\n","import Imagen from './Imagen';\n\nconst ListadoImagenes = ({imagenes}) => {\n\n  return(\n    <div className=\"col-12 p-5 row\">\n      {imagenes.map(imagen => (\n        <Imagen \n          key={imagen.id}\n          imagen={imagen}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ListadoImagenes;","import {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport ListadoImagenes from './components/ListadoImagenes';\n\nconst App = () => {\n\n  const [busqueda, setBusqueda] = useState('');\n  const [imagenes, setImagenes] = useState([]);\n  const [peticionVacia, setPeticionVacia] = useState(false);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [totalPaginas, setTotalPaginas] = useState(1);\n\n\n  useEffect(() => {\n    setPaginaActual(1)\n  }, [busqueda])\n\n  useEffect(() => {\n    // console.log('desde el useEffect')\n    const consultarApi = async () => {\n      if(busqueda === '') return;\n  \n      const imagenesPorPagina = 30;\n      const key = '17997109-6aacfb96d3c78d72b639c185f';\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page${paginaActual} `;\n\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n      if(resultado.total === 0 ){\n        setPeticionVacia(true)\n        return;\n      }\n      setPeticionVacia(false)\n      setImagenes(resultado.hits);\n                              // Calculo del total de paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina)\n      setTotalPaginas(calcularTotalPaginas)\n\n                              // Mover la pantalla para arriba \n      const jumbotron = document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({behavior: 'smooth'});\n    }\n    consultarApi();\n\n  },[busqueda, paginaActual])\n\n\n  // ir a la pagina anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaActual - 1;\n    if(nuevaPaginaActual === 0) return;\n    setPaginaActual(nuevaPaginaActual)\n  }\n\n  // ir a la pagina siguiente\n  const paginaSiguiente = () => {\n    const nuevaPaginaSiguiente = paginaActual + 1;\n    if(nuevaPaginaSiguiente > totalPaginas) return;\n    setPaginaActual(nuevaPaginaSiguiente)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">\n          Buscador de Imagenes\n        </p>\n        <Formulario\n          setBusqueda={setBusqueda}\n        />\n      </div>    \n      <div className=\"row justify-content-center\">\n        {peticionVacia && <Error mensaje=\"No hay datos para mostrar\" />}\n        <ListadoImagenes\n          imagenes={imagenes}\n        />\n\n        {(paginaActual === 1) ? null : (\n          <button \n            type =\"button\"\n            className=\"bbtn btn-info mr-1\"\n            onClick={paginaAnterior}\n          >\n            &laquo; Anterior\n          </button>\n        )}\n\n        {(paginaActual !== totalPaginas) && (\n          <button \n            type =\"button\"\n            className=\"bbtn btn-info mr-1\"\n            onClick={paginaSiguiente}\n          >\n            Siguiente &raquo; \n          </button>\n        )}\n\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}